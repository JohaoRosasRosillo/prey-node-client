#!/usr/bin/python
# coding: utf-8

#################################
# Python Mac Lock
# Written by Tomas Pollak <tomas@forkhq.com>
# (c) 2011 Fork Ltd.
# Licensed under the GPLv3
#################################

import os
import sys
import hashlib
# import objc
# import signal
# from Foundation import *
from AppKit import *
from Quartz import CGCaptureAllDisplays, CGShieldingWindowLevel

app_name = 'Lock'
font_name = 'Helvetica Light'
error_color = NSColor.redColor()
white_color = NSColor.whiteColor()

script_path = sys.path[0]
bg_path = script_path + "/../lib/bg-lock.png"

# class LockApp(NSApplication):

#   def shutdown(self):
#     print "Shutting down"
#     exit(66)

def write(text):
  print text
  sys.stdout.flush()

class FullScreenWindow(NSWindow):

  def canBecomeKeyWindow(self):
    return True

  def canBecomeMainWindow(self):
    return True

class LockView(NSView):

  message_shown = False

  def getTopOffset(self, height):
    return (self.bounds().size.height / 2) - height / 2

  def getLeftOffset(self, width):
    return (self.bounds().size.width / 2) - width / 2

  def canBecomeKeyWindow(self):
    return True

  def drawRect_(self, rect):
    # get background image
    image = NSImage.alloc().initWithContentsOfFile_(bg_path)
    rep = image.representations()[0]

    bg_width = rep.pixelsWide()
    bg_height = rep.pixelsHigh()
    # bg_height = self.bounds().size.height
    # bg_width = int((self.bounds().size.height / rep.pixelsHigh()) * rep.pixelsWide())
    image.drawInRect_fromRect_operation_fraction_(((self.getLeftOffset(bg_width), self.getTopOffset(bg_height)), (bg_width, bg_height)), NSZeroRect, NSCompositeCopy, 1.0)

    # draw background image
    imageView = NSImageView.alloc().init()
    imageView.setImage_(image)
    self.addSubview_(imageView)

  def addInputField(self):
    width = 270
    height = 40
    field = NSSecureTextField.alloc().initWithFrame_(NSMakeRect(self.getLeftOffset(width), self.getTopOffset(height) - 20, width, height))
    # field.setStringValue_("Type here")
    field.setBezeled_(False)
    field.setBordered_(False)
    field.setDrawsBackground_(False)
    # field.cell().setUsesSingleLineMode_(True)
    field.setFocusRingType_(NSFocusRingTypeNone)
    # field.setDrawsBackground_(False)
    field.setEditable_(True)
    field.setSelectable_(True)
    font = NSFont.fontWithName_size_(font_name, 34)
    field.setFont_(font)

    field.setTarget_(self)
    field.setAction_("enter_pressed")
    self.field = field
    self.addSubview_(field)
    self.show_lower(message)
    return field

  def focus_field(self):
    self.field.selectText_(self)
    self.field.currentEditor().setSelectedRange_(NSMakeRange(0,0))

  def enter_pressed(self):
    value = self.field.stringValue()
    hashed = hashlib.md5(value).hexdigest()
    # print("Enter pressed. Got: " + value)
    if hashed == passwd:
      # app.performSelector_withObject_afterDelay_("shutdown", self, 0.0)
      # app.terminate_(self)
      os._exit(66)
    else:
      if not self.message_shown:
        self.show_message("Invalid password. Try again.")

      write("Invalid password.")

  def show_message(self, message):
    width = 300
    height = 25
    msg = NSTextField.alloc().initWithFrame_(NSMakeRect(self.getLeftOffset(width), self.getTopOffset(height) - 64, width, height))
    msg.setStringValue_(message)
    msg.setBezeled_(False)
    msg.setBordered_(False)
    msg.setDrawsBackground_(False)
    msg.setAlignment_(NSCenterTextAlignment)
    font = NSFont.fontWithName_size_(font_name, 14)
    msg.setFont_(font)
    msg.setTextColor_(error_color)

    self.addSubview_(msg)
    self.message_shown = True
    self.message_view = msg

    NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(3.0, self, 'hide_message', '', False)

  def show_lower(self, message):
    width = 500
    height = 100
    msg = NSTextField.alloc().initWithFrame_(NSMakeRect(self.getLeftOffset(width), self.getTopOffset(height) - 150, width, height))
    msg.setStringValue_(message)
    msg.setBezeled_(False)
    msg.setBordered_(False)
    msg.setDrawsBackground_(False)
    msg.setEditable_(False)
    msg.setAlignment_(NSCenterTextAlignment)
    font = NSFont.fontWithName_size_(font_name, 14)
    msg.setFont_(font)
    msg.setTextColor_(white_color)

    self.addSubview_(msg)
    self.message_view = msg

  def hide_message(self):
    self.message_view.removeFromSuperview()
    self.message_shown = False
    self.message_view = None

def draw_menus(app):
  mainmenu = NSMenu.alloc().init()
  app.setMainMenu_(mainmenu)
  appMenuItem = NSMenuItem.alloc().initWithTitle_action_keyEquivalent_(app_name, 'sample', '')
  mainmenu.addItem_(appMenuItem)

  appMenu = NSMenu.alloc().init()
  appMenuItem.setSubmenu_(appMenu)
  appMenuItem.setEnabled_(True)

  # no quit item, otherwise command-q will work!
  # quitItem = NSMenuItem.alloc().initWithTitle_action_keyEquivalent_('Quit', 'quit', 'q')
  # quitItem.setTarget_(app)
  # appMenu.addItem_(quitItem)

def main():

  global app
  app = NSApplication.sharedApplication()

  # enable kiosk mode
  app.setPresentationOptions_(NSApplicationPresentationHideDock
    | NSApplicationPresentationHideMenuBar
    | NSApplicationPresentationDisableAppleMenu
    | NSApplicationPresentationDisableProcessSwitching
    | NSApplicationPresentationDisableForceQuit
    | NSApplicationPresentationDisableSessionTermination
    | NSApplicationPresentationDisableHideApplication)

  draw_menus(app)

  # raise app
  app.activateIgnoringOtherApps_(True)
  screen = NSScreen.mainScreen()

  myWindow = FullScreenWindow.alloc().initWithContentRect_styleMask_backing_defer_(
    screen.frame(),
    NSBorderlessWindowMask,
    NSBackingStoreBuffered,
    True)

  err = CGCaptureAllDisplays()
  myWindow.setBackgroundColor_(NSColor.blackColor())

  # render view and draw input
  myView = LockView.alloc().initWithFrame_(screen.frame())
  field = myView.addInputField()

  # set window properties and display
  myWindow.setTitle_('Application')
  myWindow.setContentView_(myView)
  myWindow.setLevel_(CGShieldingWindowLevel()+1)
  myWindow.orderFrontRegardless()
  myWindow.makeFirstResponder_(field)
  myWindow.makeKeyAndOrderFront_(myWindow)
  myWindow.display()

  app.run()

if __name__ == '__main__':

  if len(sys.argv) < 2 or len(sys.argv[1]) != 32:
    print "You need to pass an MD5 hexdigested string."
    sys.exit(67)
  elif len(sys.argv) == 2:
    passwd = sys.argv[1]
  else:
    passwd = sys.argv[1]
    message = sys.argv[2]

  write("Process PID: %d" % os.getpid())
  main()
